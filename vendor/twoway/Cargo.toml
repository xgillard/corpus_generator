# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
#
# When uploading crates to the registry Cargo will automatically
# "normalize" Cargo.toml files for maximal compatibility
# with all versions of Cargo and also rewrite `path` dependencies
# to registry (e.g., crates.io) dependencies
#
# If you believe there's an error in this file please file an
# issue against the rust-lang/cargo repository. If you're
# editing this file be aware that the upstream Cargo.toml
# will likely look very different (and much more reasonable)

[package]
name = "twoway"
version = "0.2.2"
authors = ["bluss"]
description = "(Deprecated - use crate memchr instead.) Fast substring search for strings and byte strings. Optional SSE4.2 acceleration (if detected at runtime) using pcmpestri. Memchr is the only mandatory dependency. The two way algorithm is also used by rust's libstd itself, but here it is exposed both for byte strings, using memchr, and optionally using a SSE4.2 accelerated version."
documentation = "https://docs.rs/twoway/"
keywords = ["substring-search", "string", "pcmpestri", "find", "memmem"]
categories = ["algorithms", "no-std"]
license = "MIT/Apache-2.0"
repository = "https://github.com/bluss/twoway"
[package.metadata.release]
no-dev-version = true
tag-name = "{{version}}"
[dependencies.galil-seiferas]
version = "0.1.1"
optional = true

[dependencies.jetscii]
version = "0.3"
features = ["unstable"]
optional = true

[dependencies.memchr]
version = "2.0"
default-features = false

[dependencies.unchecked-index]
version = "0.2.2"
[dev-dependencies.itertools]
version = "0.8.0"

[dev-dependencies.macro-attr]
version = "0.2"

[dev-dependencies.newtype_derive]
version = "0.1"

[dev-dependencies.odds]
version = "0.3"
features = ["std-string"]

[dev-dependencies.quickcheck]
version = "0.8"
default-features = false

[dev-dependencies.rand]
version = "0.6"

[features]
all = ["jetscii", "pattern"]
benchmarks = ["galil-seiferas", "pattern"]
default = ["use_std"]
pattern = []
use_std = ["memchr/use_std"]
[badges.maintenance]
status = "deprecated"
